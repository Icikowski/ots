// Code generated by go-bindata. DO NOT EDIT.
// sources:
// frontend/application.coffee
// frontend/application.js
// frontend/index.html
// frontend/locale/de-de.all.json
// frontend/locale/de-de.untranslated.json
// frontend/locale/en-us.all.json
// frontend/locale/en-us.untranslated.json

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataFrontendApplicationcoffee = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x5f\x4f\xe3\x38\x10\x7f\xf7\xa7\x98\x6b\x91\x9c\x48\x25\x14\x8e" +
	"\xbb\x87\x4a\x39\xe9\x8e\xdb\x7f\x12\x20\x04\x8b\xf6\x61\x85\x56\x4e\x3c\x69\x0c\xa9\xdd\xb5\x1d\xca\x0a\xfa\xdd" +
	"\x57\x8e\x93\x34\x09\xa5\xea\xbe\x6d\x5f\x5a\xcf\x6f\xfe\xd8\x33\xbf\x99\xa9\xc1\xb4\xd4\x78\xc5\x8c\x59\x29\xcd" +
	"\x21\x06\x59\x16\x05\x21\xa9\x46\x66\xf1\x06\x53\x8d\x16\x62\x08\x42\x38\xfc\x87\x00\x98\x46\x70\x10\xd0\x71\xa6" +
	"\xf4\xe2\xac\xa3\x47\xc3\x28\x13\x92\x07\xd4\xe2\x93\x65\x1a\x19\x0d\xa3\x47\x56\x04\x21\xf1\x96\xfd\x38\x17\xcc" +
	"\xe6\x91\x66\x92\xab\x45\x10\x46\x56\xdd\x58\x2d\xe4\x3c\xf8\xf3\xef\x30\x32\x65\x62\xfc\xe9\x24\xec\x06\xfd\x20" +
	"\x92\x04\xb5\x30\xf9\xbf\xef\x6e\x22\x94\x69\xe0\x91\xc9\xc0\x79\x15\xef\x20\x62\xf7\xec\x09\x28\x5b\x8a\x23\xff" +
	"\x18\x3a\x21\x00\x00\x9c\x59\x36\xab\x7e\x35\x9e\x67\xf5\x77\x0b\x7f\xfe\xb1\xc4\x19\x8c\xee\x8d\x92\xa3\x4a\x68" +
	"\x2c\xb3\xa5\x39\x53\x1c\x1b\xcb\x93\xe9\x71\x63\xe6\x53\xc0\x6b\xe0\x74\x3a\x9d\x81\x51\x0b\xb4\xb9\x90\xf3\x2f" +
	"\x5a\xc9\x79\x8d\xfc\xf5\x26\x72\x3a\x3d\x9d\xb5\x29\xf6\x9f\x31\x5c\xa8\xf4\x01\x32\xa5\x41\x48\x8b\x3a\x63\x29" +
	"\x82\x45\x63\x45\x6b\x05\x5b\xe3\x6f\xe4\xdf\x04\x9f\x01\xcd\x94\x4a\x98\xa6\x2e\x25\x19\x2b\x0c\x12\xe2\x5e\x78" +
	"\xa9\xec\x7b\x55\x4a\xde\x29\xad\xab\xa8\x54\x36\x73\x62\x1a\x46\x26\x57\x2b\x57\xb9\x9c\x99\xfc\x5c\xb1\xae\xa6" +
	"\x13\x41\x0c\x2b\x21\xb9\x5a\x45\x85\x4a\x99\x15\x4a\x46\x4e\x4c\x00\x44\x56\x29\x44\x05\xca\xb9\xcd\x21\x8e\x61" +
	"\x5a\x5d\x4d\xa3\x2d\xb5\x24\x75\xa4\x94\x69\x7e\x89\xab\x96\x38\xb9\xe0\x18\x84\x1d\xd0\x23\xb7\xd7\xe7\x43\xb0" +
	"\x73\xc7\x9e\xbc\xcd\xec\xca\x65\x76\x9b\xcb\x6b\x64\xb5\xdb\x2b\x8d\x9d\x27\x6a\xfc\x5e\xa2\xb1\xaf\xc8\xbe\xfb" +
	"\x9d\x35\xca\x31\x55\x1c\x6f\xaf\x3f\x9d\xa9\xc5\x52\x49\x94\x36\x70\x48\xc5\xc1\x25\xd3\xd6\x40\xec\xf3\x61\x96" +
	"\x85\xb0\x40\x5f\xa8\xcf\x51\x85\x75\x92\x74\x52\x25\xa9\x76\x5a\x81\x5f\xa7\x77\xa4\xae\x66\xbf\x73\x3c\x7a\x7c" +
	"\xe7\x42\x08\xde\xfa\x6f\x9b\xe6\x38\xdc\xf0\x7f\xe4\xf8\x3f\x47\x7b\x34\x7e\x16\x7c\x3d\x9a\xfc\x0a\xc7\x2b\x5a" +
	"\x76\xd9\xd2\x72\xdf\x11\x39\x57\xab\xff\x99\x65\x84\x08\x29\xec\x7f\x42\x72\x33\x20\xd3\x96\xf1\x90\x08\xc9\x81" +
	"\x9a\x32\x59\x08\x4b\x27\xd0\x1d\x32\x4d\x75\x1b\x4e\x4c\x20\x92\xec\x31\x61\xfa\x30\x71\x43\xa2\x35\x4e\x0b\x91" +
	"\x3e\xd0\x09\xb4\x8a\x95\xa1\xaf\x51\xa3\xe3\xf2\x91\xe6\x4c\xce\x91\x4e\xa0\x21\x70\x1d\x40\xe3\x23\xb2\x62\x70" +
	"\xa3\xc6\x69\x8f\x09\x84\xb4\x31\x3a\x2f\xdb\xd0\x40\x63\x06\x71\xff\xec\x8b\x1c\xd0\x31\x0d\x7d\xf5\xea\x96\xeb" +
	"\x35\xaa\x73\xe6\xb2\xda\x1b\xa9\x1f\x6b\x36\x31\xcb\xa2\xb6\x7d\x3d\x53\x06\xf5\xff\xa3\x1e\xd1\x9b\x46\xaf\x6d" +
	"\x47\xe3\xe7\xcd\x79\xfd\x52\x9d\x3a\x86\x6b\x57\xe6\x52\x17\x5e\x73\xc7\xb5\xd7\xe3\x9e\xa3\xd1\xde\x2d\x3b\xec" +
	"\xaf\x9d\x3d\x5d\x37\xdf\x76\xd0\xaf\x11\x21\x97\xa5\xf5\x3b\xc4\x5d\x7c\x2f\xdd\x4c\xa5\xa5\xd9\xd3\xaf\xc1\x02" +
	"\x53\xfb\xc6\x7a\xf2\x6b\xb0\x61\xf9\xd6\x9a\x41\x0c\xdd\x82\xed\x59\xad\xe1\x1e\xe3\xb8\x7b\x8f\xfd\x26\xc3\x72" +
	"\x87\xc2\xb6\x6a\xf6\xd0\x6d\xff\x0a\x9a\x9d\x4b\xfa\x1b\x71\x30\x43\x5e\xdd\xb3\x99\xd9\xe4\xc0\x2b\xb5\xc3\xa7" +
	"\x8a\xde\xf4\x7a\x10\x92\x9f\x01\x00\x00\xff\xff\xc9\x6a\xfe\xbb\xd8\x08\x00\x00")

func bindataFrontendApplicationcoffeeBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendApplicationcoffee,
		"frontend/application.coffee",
	)
}



func bindataFrontendApplicationcoffee() (*asset, error) {
	bytes, err := bindataFrontendApplicationcoffeeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/application.coffee",
		size: 2264,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1525534186, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFrontendApplicationjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xe0\x1a\x03\x92\x00\x8d\x76\xd2" +
	"\x6c\x0f\x36\xf4\xb0\x79\x5b\x3b\xa0\x2d\x8a\x64\xc5\x1e\x86\x62\xa6\xc4\x93\xc5\x56\x26\x3d\x92\x8a\x5b\xa4\xfe" +
	"\xee\x03\x45\x51\xa2\x68\x3b\x7f\x9e\x9a\x17\xe7\x74\xc7\x3b\xde\xdd\xef\x7e\xbc\xd9\x0c\xbd\x02\x0e\x92\x68\xa0" +
	"\x28\xff\x8a\x56\xa2\x2c\x01\x6e\x0b\xc9\x76\x1a\x5d\xe1\x97\x78\x3e\x89\xcb\x86\x17\x9a\x09\x1e\x27\xe8\x7e\x82" +
	"\xd0\x1d\x91\xa8\x90\x40\x34\xdc\x42\x21\x41\xa7\x88\x12\x4d\xde\x09\xfd\x87\x68\x38\x4d\x51\x45\x54\xf5\x46\x10" +
	"\x9a\x22\xc6\x99\xfe\x95\x71\xaa\x52\xc4\x61\xef\xac\x25\xfc\xd7\x80\xd2\x4e\x54\xed\xef\xaa\x75\x48\x5b\xb1\x91" +
	"\xf0\x9e\x28\xb5\x17\xd2\xc8\x95\xd8\xff\x46\x34\x49\x91\x12\x5b\xd0\x15\xe3\x9b\xbf\xa5\xe0\x9b\xe5\x64\x82\x02" +
	"\x63\x94\x21\xde\xd4\x75\xab\xf1\x2f\x88\x32\x14\xa4\x60\x93\xb0\x91\x97\xad\xac\x9c\xe5\x34\x8e\x2e\x4a\x21\xb7" +
	"\x2b\xcf\x41\x94\xe0\x92\x71\x1a\x47\x1a\xbe\x68\x22\x81\x44\x09\xbe\x23\x75\x9c\xf4\x67\xc7\xb7\x78\x4b\x74\x85" +
	"\x25\xe1\x54\x6c\xe3\x04\x6b\x71\xab\x25\xe3\x9b\xf8\xe5\xcf\x09\x56\x4d\xae\xac\x74\x95\x04\x91\x5f\xb1\x3c\x07" +
	"\xc9\x54\xf5\xcb\xef\xb7\x18\x78\x11\xab\xa1\x42\x9e\xff\xee\xd8\x14\x93\x4f\xe4\x4b\x1c\x91\x1d\x9b\xd9\x64\xa3" +
	"\xb4\xcb\x0d\xb5\x0d\x59\xf4\x92\x8b\xb1\xe8\x7e\xbb\xcf\x87\xd4\xb3\xfe\xeb\xeb\x0e\x16\xe8\xc5\x27\x25\xf8\x0b" +
	"\xf7\x5d\x69\xa2\x1b\xb5\x12\x14\x7c\x5f\x57\xf3\xcb\x45\xd0\xb4\x5e\x77\x3d\x9f\x2f\x82\x3e\x0d\xca\x9f\x1e\x52" +
	"\x5e\xcf\xaf\x17\xc7\x5d\xb2\x7f\xb3\x19\x7a\x2b\x8a\xcf\xa8\x14\x12\x31\xae\x41\x96\xa4\x00\xa4\x41\x69\xc6\x37" +
	"\x9e\x9d\x04\xdd\x48\x3e\xbe\x5b\xec\x3b\x72\x85\xf8\x97\xd1\x05\x8a\x4a\x21\x72\x22\x23\x4f\x7f\xe8\x6a\xdb\xfe" +
	"\x3f\xf1\x7f\x9d\xa6\x0b\x51\x92\x5a\x81\xf9\x72\x68\xc1\xe6\xe3\xff\x14\xd8\xba\x53\x06\x5a\x5c\xe8\xd2\x98\x45" +
	"\x09\x36\xc8\xb6\x10\xb2\x5e\xdc\xdc\x9c\x83\xab\xd1\xdb\x5b\x98\xff\x50\x86\xf6\x8c\x53\xb1\xc7\xb5\x28\x88\x31" +
	"\xc6\x83\x01\x2b\x51\x6c\x24\x5c\x03\xdf\xe8\x0a\x65\x59\x86\xe6\x43\x51\xed\x7d\xac\xa9\xcd\xcf\x5c\xad\x20\x92" +
	"\xbe\x73\x63\x1a\x25\xb8\x62\x14\x1c\xc4\x9d\xde\x2a\x3f\xdc\xbc\x39\xa1\xf7\x52\x0b\x55\x7d\xd7\xf7\xa6\xeb\x81" +
	"\x81\x57\x1d\x13\xe2\x06\x48\x17\xe6\xbd\x84\x13\x65\x1a\xd1\xc7\x43\xb5\x4a\x11\xa3\x29\xda\x11\xa9\xd5\x13\xcb" +
	"\xd6\x19\x50\x28\x04\x85\x0f\x37\x7f\xae\xc4\x76\x27\x38\x70\xdd\x16\xb3\xbb\x6e\xeb\x10\x65\xad\x31\x56\xbb\x9a" +
	"\xe9\x38\xfa\x16\x25\x43\xe1\x5b\x03\xbf\xf2\x57\x43\xe5\xbb\x08\xad\xc9\x3f\xf3\x8f\x0e\x6e\x47\x0c\x62\x0d\x2e" +
	"\x3f\xfa\x3d\x62\xb4\x8f\xda\x93\xc8\x65\x50\x43\x4b\x0a\x6b\x43\x0a\x1b\xd0\xb3\xe9\x3d\xa3\x87\xf5\x98\x17\x9e" +
	"\x3e\xe9\xed\x4c\x8e\xb8\xdd\x23\x01\x33\xcb\x1d\x35\x9f\x98\x14\xdb\xaa\x9e\xff\x4f\xb5\xe9\x0c\xd1\xe6\x2d\xd1" +
	"\xaa\x26\xdf\x32\x1d\xa5\x23\x1e\xf7\xb1\x36\x3c\x27\x98\x93\xbb\x9c\xc8\x1f\x73\x43\xb8\xbd\x83\xa2\x66\xc5\xe7" +
	"\xc8\x7b\x77\xfa\xc3\xb6\xfd\xce\xce\xd4\xb3\xa8\x08\xdf\x18\xfa\x74\x13\x78\x0c\x4c\x09\x77\x40\xea\xe0\x92\x2e" +
	"\xc6\x08\x91\x5e\xfa\x7d\xec\x53\xe9\x0f\xf0\x93\x50\xa2\x6c\x2c\x3b\x5c\x5d\x44\x49\x8f\x92\xd3\xd4\x33\x22\x3b" +
	"\x3f\x8e\xe9\xdb\xf1\x63\xf7\xba\x9d\x8b\x46\xd6\xfe\xdb\xf3\xba\x83\x3d\xd1\x04\xf7\x04\x39\xe0\x39\x00\xe7\x0f" +
	"\x99\x7d\x66\x07\x50\x8f\xbc\xac\xa7\xf7\x83\x7c\xf8\xd6\x4a\xde\xf1\xc3\xda\x87\x74\x23\x6b\x7b\x24\x7e\x20\xfd" +
	"\xe4\x70\x31\xf2\xb9\x5e\x3e\x8b\xb2\x42\x3e\x79\x8c\xd6\x06\xbe\x39\xad\xb7\x9b\x00\xe3\xbb\x46\x77\x6b\x40\x23" +
	"\xeb\x27\xdb\x97\xa2\x68\xd4\xd3\xdd\x2b\xa8\xa1\xd0\x01\x53\x9e\xd9\x7a\x7a\x48\x74\x63\xf9\x38\x1a\x82\x05\xc4" +
	"\x03\xc0\xb3\xbb\x1f\xee\x2f\x14\x1e\xd9\x5f\xbe\xff\xbb\xf3\x1c\x80\x0c\x36\x01\x42\xce\x3e\x5e\xe7\x76\x46\x15" +
	"\xb2\xc4\x78\x23\x7a\x64\x7d\x38\x4a\x28\x7c\x1d\xa7\xe1\xb6\xee\xb1\x70\x70\x67\xc7\x76\xdd\xf1\x64\x39\x99\x1c" +
	"\x12\x5c\x90\xba\x8e\x75\xc5\x54\xb2\x9c\xfc\x1f\x00\x00\xff\xff\x52\xff\x18\xf8\x1d\x0c\x00\x00")

func bindataFrontendApplicationjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendApplicationjs,
		"frontend/application.js",
	)
}



func bindataFrontendApplicationjs() (*asset, error) {
	bytes, err := bindataFrontendApplicationjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/application.js",
		size: 3101,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1525534419, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFrontendIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x59\x53\xe3\xba\x12\x7e\x3e\xf3\x2b\x74\xcc\xe3\x8c\x6c\x12\x60" +
	"\x58\x4e\x9c\x2a\xd6\x61\x0b\x0c\x61\x39\x33\xf3\x26\xdb\x6d\x5b\x41\x96\x8c\x24\x27\x04\x8a\xff\x7e\x4b\xde\x88" +
	"\xb3\x40\x2e\x77\xe6\xe1\x42\x55\x12\xcb\x6d\x75\x7f\x5f\x7f\x6a\xb5\xd5\xf9\x3b\x10\xbe\x1e\xa7\x80\x62\x9d\xb0" +
	"\xee\xa7\x8e\xf9\x42\x8c\xf0\xc8\xb5\x80\x5b\xdd\x4f\x08\x75\x62\x20\x81\xf9\x81\x50\xe7\x6f\x8c\x51\x1f\x1e\x32" +
	"\x2a\x21\x40\x09\x68\x82\x34\x89\x14\xc2\xb8\xbc\x9f\x0f\xf9\x31\x91\x0a\xb4\x6b\x65\x3a\xc4\x5b\xd6\xe4\xad\x58" +
	"\xeb\x14\x9b\xe7\x87\xae\xf5\x03\xdf\xee\xe2\x7d\x91\xa4\x44\x53\x8f\x81\x85\x7c\xc1\x35\x70\xed\x5a\x27\x87\x2e" +
	"\x04\x11\x34\x9e\xe4\x24\x01\xd7\x1a\x52\x18\xa5\x42\xea\x09\xe3\x11\x0d\x74\xec\x06\x30\xa4\x3e\xe0\xfc\xe2\x0b" +
	"\xa2\x9c\x6a\x4a\x18\x56\x3e\x61\xe0\xb6\xbe\x20\x15\x4b\xca\xef\xb1\x16\x38\xa4\xda\xe5\xc2\xea\x7e\x7a\x05\xb4" +
	"\x27\x84\x56\x5a\x92\xf4\x15\x07\xa3\xfc\x1e\x49\x60\xae\xa5\xf4\x98\x81\x8a\x01\xb4\x85\x62\x09\xa1\x6b\x19\x0c" +
	"\x6a\xc7\x71\xfc\x80\x0f\x94\xed\x33\x91\x05\x21\x23\x12\x6c\x5f\x24\x0e\x19\x90\x47\x87\x51\x4f\x39\x7a\x44\xb5" +
	"\x06\x89\xbd\x6a\x76\x67\xdd\x5e\xb5\x57\x1d\x5f\x29\xa7\x1e\xb3\x13\xca\x6d\x5f\x29\x2b\x77\x5b\xfc\x51\xae\x21" +
	"\x92\x54\x8f\x5d\x4b\xc5\xa4\xbd\xf1\x15\x9f\xef\x6e\x6d\x3f\x7d\xbe\xdf\x0e\x07\x51\xef\xec\xca\xb9\x7f\x58\xbf" +
	"\xbc\x6c\xf7\x64\xb8\x75\xc7\xf4\xcf\x84\x39\x77\x87\xd7\x9f\xfb\xd1\x6a\x18\xb7\x57\x5d\x0b\xf9\x52\x28\x25\x24" +
	"\x8d\x28\x77\x2d\xc2\x05\x1f\x27\x22\x53\x16\x72\x7e\x1f\xb6\x3c\xfe\x11\xd1\x7e\xec\xac\xdb\x2d\xbb\xe5\x84\x8c" +
	"\x68\x36\xfe\x6f\x71\xed\x3e\x6c\x92\xbd\xef\x0f\xbf\x46\xf4\xb6\xd7\x0e\x8f\xfd\x98\xf5\xc9\xdd\xc1\x66\xff\x48" +
	"\x1d\xee\x69\xf1\xf9\x6c\x73\x33\x1c\xf6\x0f\xbf\x0d\xf8\xf1\xed\xdb\xb8\x3e\xfd\xf5\xd7\x52\xb0\x32\x05\x76\x28" +
	"\xb8\x26\x23\x50\x22\x29\x50\x49\x60\x40\x14\x28\x67\xb8\x61\xaf\xda\xad\x76\x9e\x20\xc2\xd8\xdb\xe1\xaf\x6d\xad" +
	"\xe3\x6f\xab\xe1\xc9\xbf\xfb\x6a\xff\xe9\xf4\xa4\xb7\x7b\x77\x71\xf5\x3d\x1c\x1c\xaf\x6e\xf9\xe3\x9f\xe4\x56\xf7" +
	"\x46\x83\xd3\xd1\x03\xed\x9f\x3d\x3e\x1e\x3a\xf2\x71\xfb\xeb\xad\x14\x83\xd6\x9e\x3e\xb9\xfa\xda\x3b\x3f\xcd\x62" +
	"\x20\x97\xdb\x0b\x21\x55\xe2\xd4\x54\x33\xe8\x5e\xde\x5c\x23\x8c\x2e\x39\xa0\x1b\x9a\x00\xba\x06\x5f\x82\x56\x1d" +
	"\xa7\xb8\x5b\x9a\xe6\x98\xbb\x65\xb8\x2b\x06\x9c\x8e\x29\x8f\x46\x52\xf0\xe8\x0b\x5a\xe1\x42\x87\x22\xe3\xc1\x17" +
	"\xb4\xe2\x13\x19\xf4\x81\x04\xc5\x3c\xe5\x40\x71\x71\xdb\x3f\x9f\x31\xf8\x2e\x01\x3d\xa3\x80\xaa\x94\x91\xf1\x0e" +
	"\xe2\x82\xc3\x3f\xe8\xa5\x74\x64\x87\x42\x68\x90\xe8\x19\xf9\x82\x09\xb9\x83\x56\xda\xa1\xf9\xff\x07\x19\x96\xb1" +
	"\xa2\x4f\xb0\x83\x56\xed\x6d\x48\xfe\x41\x1a\x1e\x35\x26\x8c\x46\x7c\x07\xf9\xc0\x35\xc8\x6a\x9e\x8e\x53\x47\xdf" +
	"\x71\xaa\x62\xd3\xf1\x44\x30\xae\xd0\x71\x32\x44\x3e\x23\x4a\xb9\x16\x27\x43\x8f\x48\x54\x7c\x61\x78\x4c\x09\x0f" +
	"\x30\x8b\xaa\x81\x80\xc8\x7b\xe4\x45\x38\x95\x34\x21\x72\x6c\x55\x94\x74\x48\x73\x02\xec\x49\xc2\x83\x4a\x1f\x2b" +
	"\x56\xb7\x43\x2b\x83\x90\x28\x14\x12\x9c\x29\x90\x58\xe5\x1c\x58\xdd\x8e\x43\xbb\x68\x51\x22\x48\xed\xc4\xcb\xb4" +
	"\x16\x7c\xca\x93\x16\x51\xc4\x40\x5a\xc8\x94\x59\xd7\x2a\x6c\x2c\x14\x10\x4d\xca\x7b\xae\xe5\x0b\xc6\x48\xaa\xa0" +
	"\x1a\x26\x32\x32\x05\x74\xa5\x98\xe2\x3a\x4b\x4d\xd1\x83\x60\xbf\x28\x7a\x16\x22\x92\x12\x6c\x4a\xa0\x14\xac\xf6" +
	"\xb4\xc0\xac\xe0\x08\x02\x83\x8c\x19\x17\xf9\x28\x23\x9e\x59\x2b\x37\x79\x00\x86\x3d\x1a\x11\x4d\x05\xaf\x19\x33" +
	"\xa2\x4a\xc9\x02\x30\x98\xfa\xc6\xb4\xe3\x18\x93\x1a\xbe\x53\x60\x2b\xb3\x86\x50\x27\xa0\x75\xde\x2a\x84\x55\xa2" +
	"\x5e\x11\xd3\x60\x21\x80\x89\x58\x32\x36\x15\x89\xd1\x44\xc2\x30\xc9\xb4\x98\xb0\xcb\xeb\xdb\x84\x25\xa6\x1a\x12" +
	"\x13\x28\xa3\xef\x1b\x91\x5a\x0e\x45\x50\x30\xba\xae\xf2\x3f\xad\x8e\x94\x99\x75\x9a\xcb\xe2\xf9\xf9\x06\x59\x9e" +
	"\xe6\x98\xc3\xa8\x12\xcc\xcb\x8b\x91\x45\xd3\x6b\xc7\xc9\xd8\x2b\x55\x01\x1d\x96\xf5\xd8\xe1\x64\x58\x09\xbd\x41" +
	"\x18\xd7\x84\x72\x90\x28\xd1\x78\xfd\x55\xc8\x13\x26\x52\x8c\xd0\x20\x53\x9a\x86\x63\x5c\xee\x87\xb8\x58\x5a\x93" +
	"\xcc\x35\x93\x80\x93\xa0\xde\x93\x67\x0d\x08\x03\xa9\x51\xfe\x89\x03\xc2\x23\x23\x5b\x29\x8c\x42\xf3\xb1\x92\x97" +
	"\xb2\x98\x34\x66\x41\x68\x86\xa3\x87\x0c\x94\x91\x14\xf6\xa9\xf4\x59\x25\xbc\x98\x06\x01\x70\xd7\xd2\x32\x83\x82" +
	"\xc1\xc6\x2c\x39\x9b\x45\x00\x05\x97\x98\x0b\x8d\x0b\x7f\x2f\x2f\x93\x61\xbf\x52\xf8\x41\x1c\xcd\x2a\xf9\xc7\xd1" +
	"\x54\xde\xf0\xc8\xe4\xa9\xf0\xf9\x16\xa2\xc6\x65\x79\x31\x5f\x04\x6f\x67\xbb\xd5\xb6\xea\x07\x67\x4c\x88\x0c\x90" +
	"\x27\x64\x00\xb2\x2e\x99\x39\x37\xe6\xc6\xc5\xab\xfe\x9b\xd4\x4c\x4d\x80\x4d\xcd\x06\x39\x51\x76\x8b\x62\x3f\x8a" +
	"\xa9\x86\xa9\x67\x4b\x4a\xf2\xbd\xab\xb9\x60\x9a\x2e\xa6\x93\x3b\xc7\xab\xd9\x20\x66\x66\xef\x84\x42\x26\x39\x02" +
	"\xf3\x63\x5f\x02\xd1\x30\x17\xc4\xf4\x94\xc6\x1c\x47\x52\x64\xe9\x1c\x43\x53\x30\x4c\xbd\x44\xa1\x90\xae\x55\x6d" +
	"\x0a\x39\x92\x7c\xbc\x92\xaa\x29\xde\xf9\xda\xcf\x47\xe7\xce\x63\x98\x21\x12\x48\xc3\x6f\x59\xc9\x8d\x46\x47\xca" +
	"\xb5\x36\x4a\x7d\xd6\x9b\x4f\xf5\xd0\x1c\x08\xb3\x44\xe5\xc3\x94\xa7\x99\xae\x7c\x78\x9a\x23\x53\xa0\x54\xe6\xfb" +
	"\xa0\x54\xb5\x13\xa9\xcc\x4b\xa8\xb6\xd0\x90\xb0\x0c\x5c\xab\xae\x63\x7e\xce\xda\x6b\x66\x66\x49\x76\x4c\xd4\xdd" +
	"\xb7\x33\xd6\x54\xec\xbc\x0c\x56\xc2\xab\xc3\xaa\x84\x57\x77\x23\xcb\x0b\xaf\x9c\x63\x49\xe1\x95\xe9\x2a\x80\x06" +
	"\xbf\x4f\x7c\xe9\x6c\x26\x0a\xaf\x26\xaa\x54\x02\xce\x24\x9b\xf6\x66\xfc\xcd\x3c\xb7\xb4\x32\xcb\x44\x17\x09\x35" +
	"\x6e\xac\x05\xc2\x02\x12\x08\xce\xc6\xb3\xa9\x9c\xa3\x9f\xb7\x71\x78\x99\xe4\x38\xa6\x7c\x66\xd1\xce\x41\xf2\x3f" +
	"\xa8\x62\xa6\x1c\x35\x7a\xd2\x3f\x55\x92\x0c\x4f\xa6\x46\xff\xee\xb2\xf4\xae\x32\x24\x0c\x81\xb0\xb7\x78\x5d\x62" +
	"\xca\xa9\x06\x74\x66\xdd\x1b\x2a\x0b\x47\xd7\x93\x35\xcc\xd8\x94\xfe\x27\xfa\x97\xaa\x99\x9b\x13\xca\x9b\x9c\xfc" +
	"\x96\x14\xff\xbf\xe5\x77\xe9\xf5\xba\x64\xfd\xaf\xd7\xeb\xe2\xe2\x3f\xcb\x33\x7a\x57\x69\x46\x5e\xf9\x02\x9e\xad" +
	"\x7a\x1f\x49\x6d\x71\x5d\x9c\xa2\x38\x76\xdd\x6f\xd4\xe7\x28\xd3\x16\xa6\x61\x35\xf7\x16\xf4\xb2\x89\xc6\x1b\xef" +
	"\xf5\x32\xa8\x78\xe5\x6c\x50\x3b\xb1\x92\xc4\x08\x24\x04\xd8\x1b\x5b\x2f\x2f\xa8\x6e\xe8\xab\xf7\xff\x88\xea\x38" +
	"\xf3\xf2\xd7\xfe\xf3\xec\x89\x86\x20\x1d\xa1\x55\xb3\xbd\xf7\x4c\xb3\x57\x18\x96\x0d\x7e\x65\x7a\x79\x73\x6d\xba" +
	"\x7a\xf4\xfc\x6c\x0f\x41\x2a\x2a\xf8\x04\x85\xf3\xba\xb5\x69\xca\x3a\xca\x97\x34\xd5\x48\x49\x7f\xe9\xa3\x96\xc1" +
	"\x43\x06\x72\xec\xac\xd9\x6b\x76\xab\xbc\xc8\x0f\x57\x06\x8d\xc3\x89\x79\xa7\x2b\x47\x51\xba\xef\x39\x67\xa7\x57" +
	"\xec\xfc\x22\xbc\xcc\xb6\x5b\x9a\xac\xb5\x85\x73\xd1\xfb\xf5\xc8\xf4\xa8\x2f\xb6\xae\x74\x72\xdf\xeb\x07\xbb\xd9" +
	"\xd6\xe2\xd3\x15\xf3\x8a\x97\x07\xdd\xfd\x30\x82\x54\xa4\x29\x48\x7b\xa0\x9c\x96\xdd\x5a\xb7\x5b\xd5\xc0\x72\x28" +
	"\xae\x6f\xda\x3d\xf0\xe5\x0f\x79\x4a\x76\xd5\x43\x12\xa6\xf7\xdb\x3f\xfa\x57\x27\x37\xec\x40\x8c\x7b\xc9\xad\x8e" +
	"\xce\xf6\x0e\x79\x70\x40\xd5\xb5\xff\x47\x51\x2c\x3a\xce\x1b\x4c\x9f\xe6\xbd\x0f\x69\xe3\xf3\x6a\xfb\x29\xdb\xb8" +
	"\xbd\x3d\xbf\xba\xbf\xdc\x1c\xb5\xbe\x9d\xc8\xaf\xc3\x50\xef\x47\xbd\xf0\x28\xf8\xe5\xef\x1e\xc3\x81\x3e\xe2\x67" +
	"\xbf\xd4\x9e\x5a\x0a\xd2\x87\x31\x45\xd4\xf3\x40\x52\x15\x63\x02\x26\x3b\x06\x4f\x63\x6c\x49\x40\xc7\xdb\x7b\xce" +
	"\x8f\xfe\x01\x1d\x5c\xd0\xa3\x35\x12\xdd\x0d\x34\x7d\x6a\x9d\x9c\xdf\xd1\x35\x5f\x1d\x06\xdf\x9e\xb6\x7f\xee\x45" +
	"\x1b\x37\x83\x7f\x45\xd6\xfb\x20\x20\x92\xa6\x8c\xfa\xf9\x01\x85\x89\xa7\x91\xcf\x8e\x53\x1c\x15\x75\x9c\xe2\x08" +
	"\xfb\xd3\x7f\x02\x00\x00\xff\xff\x3b\x67\xfd\x33\xd4\x16\x00\x00")

func bindataFrontendIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendIndexhtml,
		"frontend/index.html",
	)
}



func bindataFrontendIndexhtml() (*asset, error) {
	bytes, err := bindataFrontendIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/index.html",
		size: 5844,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1525534189, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFrontendLocaleDedealljson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xb1\x6e\x1b\x4b\x0c\xec\xfd\x15\xb4\x6a\x9d\x9f\xf1\x02\xa4\x50" +
	"\xaa\x18\x36\x82\x00\x46\x8a\x18\x6e\x82\x34\x7b\xb7\xa3\xdb\x85\x56\x3c\x81\xe4\xfa\x12\x07\xfe\x1b\x7f\x83\xab" +
	"\x74\xfa\xb1\x60\x4f\x52\x72\x32\x4e\x49\xb7\xc0\x62\x86\x33\xe4\x90\x3f\xce\x88\x66\x2e\x41\xac\x52\x34\x02\xab" +
	"\xb8\xb3\x6a\xd9\x65\xf6\xb3\x05\x95\x5f\xa2\x59\x67\x01\x32\x5b\xd0\xec\xda\x29\x45\x35\xe2\xd8\x04\x23\xef\x94" +
	"\xee\x06\xd0\x9c\x7a\xa7\xe4\x33\x69\x6e\x82\xda\xd7\x7c\x79\xf9\xff\xdb\x80\x94\xe2\xe6\xdd\xec\x8c\xe8\x69\x3e" +
	"\x2a\xd3\xad\x61\x21\x72\x5b\xf5\x60\xab\x7a\xe9\xb8\x9d\x28\xf5\x51\x5a\xb0\x2f\xb4\x6d\xe4\x96\xb4\x09\x11\xcb" +
	"\x0b\xba\x61\xd3\x26\xe4\xe4\x63\x9b\xb9\x3d\x51\xa8\x36\xae\x1a\x81\x33\xec\x4d\x4d\xf0\xef\x84\x13\x44\x0d\x29" +
	"\x81\xcf\x8f\xe1\x8c\xfe\x34\xf6\x13\x32\x0e\xd6\x8f\x61\x82\x07\xb8\x74\x1a\xf9\x05\xb1\xa5\x75\x94\x51\xef\x46" +
	"\x85\x93\xab\x71\x00\x57\xde\x99\x9b\xea\x0b\x07\x97\x8c\xfc\x6f\x01\xba\xf8\x43\x60\xf8\x66\x55\x9d\x85\xab\x10" +
	"\x79\xaa\xfe\x55\x34\x03\x49\x5e\x82\x7c\x04\xdd\x7f\xbe\xdd\xcf\x52\x91\x6a\x35\x72\x79\x39\x27\xef\x46\xf2\xc8" +
	"\x3b\x9f\xa5\x09\xf4\x58\x5a\xb5\x7d\x11\xa3\x7e\xfb\x53\x3c\x2e\xe8\x43\xac\x49\x23\x08\x91\x97\xae\x09\xd4\x23" +
	"\x1a\xe4\xfc\x95\x9c\xa2\x64\xd0\x84\xa9\x44\x95\x09\xbe\x69\xd4\x4a\x0a\x86\x37\xde\x37\xc1\x32\xb7\x8b\xdd\xcf" +
	"\x7f\xe3\x2f\xba\xce\xb4\x72\xcc\xba\xcb\x1e\x67\x29\xb5\xd7\x2e\x91\x63\x45\x00\x9f\xd3\x5d\x57\xbb\xe4\x4b\x14" +
	"\x8b\xbf\xbb\xa2\x88\x18\x99\xd2\xf6\xd9\xab\xcd\x87\xf4\x8e\xcc\x3d\x40\xb4\x09\x7d\x66\x0f\x9e\x93\x4b\xda\x51" +
	"\x0d\x55\x08\xf9\x28\x58\x19\xad\xba\x4d\x84\x80\x29\xb3\x27\x8d\x4d\x80\x90\xab\x75\x83\xe1\xc9\x27\x02\x38\x18" +
	"\xdf\x74\x3d\x04\xbe\xaa\xbf\x4f\xf8\xbe\xdd\x3e\xe7\xa5\xd1\x3a\xda\x6b\x94\xe0\x90\xa2\x13\x33\xbc\x5f\x8f\x1d" +
	"\x38\x7e\xcc\x8f\x88\x2d\x98\x56\x29\x36\xab\x61\xb0\x0a\xa6\xab\x6c\xd6\x31\xb9\xba\x98\x01\xaf\xc8\x8b\xe3\x32" +
	"\x5c\xd5\x31\xfe\xa8\x89\x2d\x0a\x95\x0d\x66\xbd\xab\x11\xa9\x45\xda\xbe\x68\x49\x48\x1f\xc5\x5f\x4c\x88\xcd\x92" +
	"\xa6\x2e\x05\x22\x1f\x4a\xf4\x59\x3c\x06\xf6\x84\x3d\x79\x66\x83\xd0\xb2\x4b\x65\xc9\x21\x43\x10\x5b\x1c\xda\x6a" +
	"\xe3\x48\x47\x4b\xf8\xfb\x3a\xde\xec\x77\xb8\xf8\x28\xc3\x9e\xd8\xcd\x1d\x8b\xc0\xf9\x72\x78\xfe\x75\x14\x5c\xd6" +
	"\x54\x7a\x78\x6a\xba\x03\xd9\x7e\x4d\x77\x77\x66\x2a\xda\xc7\x17\x66\xbf\xe7\x67\x4f\xbf\x02\x00\x00\xff\xff\xec" +
	"\xbf\x58\x0f\x72\x05\x00\x00")

func bindataFrontendLocaleDedealljsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendLocaleDedealljson,
		"frontend/locale/de-de.all.json",
	)
}



func bindataFrontendLocaleDedealljson() (*asset, error) {
	bytes, err := bindataFrontendLocaleDedealljsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/locale/de-de.all.json",
		size: 1394,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1525534417, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFrontendLocaleDedeuntranslatedjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x05\x04\x00\x00\xff\xff\x43\xbf\xa6\xa3\x02\x00\x00\x00")

func bindataFrontendLocaleDedeuntranslatedjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendLocaleDedeuntranslatedjson,
		"frontend/locale/de-de.untranslated.json",
	)
}



func bindataFrontendLocaleDedeuntranslatedjson() (*asset, error) {
	bytes, err := bindataFrontendLocaleDedeuntranslatedjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/locale/de-de.untranslated.json",
		size: 2,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1525534417, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFrontendLocaleEnusalljson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6b\xdc\x3c\x10\xbe\xe7\x57\x3c\xd9\x4b\x2e\xaf\xf3\x86\x16" +
	"\x7a\xd8\x9e\x42\x4f\x2d\xa1\x94\x7c\x1c\x02\xbd\xc8\xf6\xc4\x16\x91\x35\x8b\x34\x8a\x6a\x4a\xfe\x7b\x19\xcb\x9b" +
	"\x3a\x8b\xdd\xcb\xee\xc2\xcc\xa3\x79\x3e\x66\xf6\xf7\x19\xb0\x33\x8e\x82\x54\x91\x9a\x40\x52\x79\x96\xea\x89\x93" +
	"\x6f\x77\x7b\x68\x15\xd8\xb1\xf4\x14\x76\x7b\xec\xee\x7b\x1b\x61\x23\x3c\x0b\xa4\x27\x14\x08\x46\x4e\x30\x81\xe0" +
	"\x98\x9f\xad\xef\xf0\xc4\xe1\x67\xba\xba\xfa\xf0\xa9\x27\xe7\xec\xe1\xf3\xee\x0c\x78\xfd\x6f\x31\x89\x07\x92\xde" +
	"\xfa\xae\xca\xe4\xa5\xca\x81\x7d\xb7\x32\xed\xee\xd8\x06\x6d\xc3\xd4\x76\x89\xaf\x17\x03\x5e\x28\x8c\x88\x1c\xc2" +
	"\x08\x53\x73\x52\x32\x36\x6e\x8c\xac\xc5\x57\x4d\x20\x23\x34\x2b\x5c\x99\xf4\x65\xaa\x2f\x24\x9d\xbf\xc7\x7b\xca" +
	"\xdb\xe0\xef\x94\x71\x57\x8a\xef\x40\x81\x5e\xc8\xb8\x6d\xdc\x5d\xcf\x19\xc3\xc6\x54\x67\x6a\x3a\x62\xab\xd6\x88" +
	"\x59\x7b\xa0\xb8\xaf\xd5\xfd\x5f\xa4\xd0\x2f\xa9\xea\x14\x7c\xd5\x5b\xbf\x36\xf7\x87\x23\x13\x09\x81\x06\x1a\x6a" +
	"\x0a\x25\x4c\x46\xc7\xfa\xa9\x46\xe2\xe1\xf6\x46\x33\x0d\x91\xdc\x13\x4c\x84\xf4\x46\x90\x39\xb9\x16\x2d\x45\x09" +
	"\x3c\x2e\x48\x5f\xe2\x5b\x8a\x82\x83\x89\x11\x76\x7a\x49\xe3\x65\x4f\x20\x17\xe9\xfc\x84\x98\x72\x9a\xd8\xd1\xda" +
	"\x7e\x69\x84\x1f\x1b\x9d\xe0\xbb\xe9\x37\x5d\x8b\x90\x17\xcb\x7e\x5f\x6a\xff\x2f\x8b\x78\xe4\x74\x11\x08\xec\xdd" +
	"\x88\x48\xa4\xab\x32\x09\x60\xdf\xd0\x25\xae\x23\x22\xb3\x57\x05\xba\xa1\x81\x1c\x9b\x76\x62\x7e\x30\xdd\xd2\x77" +
	"\x64\xeb\x1c\x6a\x42\xa7\xb4\x23\x63\x30\x63\x4d\x68\xf8\x30\xaa\x24\xcf\x79\x63\xb7\x26\x49\x07\xce\x14\xa8\xad" +
	"\xea\x71\xcd\xec\x52\x44\x3d\x9e\xa2\x02\x1d\x37\x64\x23\xa7\x7b\x46\x69\x58\x32\x6d\x9c\x6d\x9e\x8b\xc8\x3a\x89" +
	"\xb0\xd7\x2f\xa5\x6e\xb2\x5e\x60\xcb\xea\x41\xe4\xa2\x68\x2d\xac\x47\x4e\x68\x8c\x2f\x9e\xbd\x58\xca\xaa\x50\xfd" +
	"\x3a\x4d\x4a\x09\xa6\xe0\x56\x88\x3d\x72\x0a\x6f\xce\x99\x88\x72\x5d\x2d\x8c\x6f\x11\x85\x55\x6e\x8a\x6f\x59\x3c" +
	"\xdc\xde\x2c\xb7\xd3\x8a\xa3\x7f\xdf\xd3\x7c\x8c\x06\x9e\xf2\x3c\xe6\x14\x1f\xc8\xb4\xfa\xf7\xb1\xf9\xc6\x6d\x69" +
	"\x98\xb6\x78\x7e\x63\x2b\xc2\xe9\xc1\xf9\xd0\x66\x25\xdb\xb7\x36\x37\x14\xaf\xce\x5e\xff\x04\x00\x00\xff\xff\xc2" +
	"\x00\x37\x39\x3e\x05\x00\x00")

func bindataFrontendLocaleEnusalljsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendLocaleEnusalljson,
		"frontend/locale/en-us.all.json",
	)
}



func bindataFrontendLocaleEnusalljson() (*asset, error) {
	bytes, err := bindataFrontendLocaleEnusalljsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/locale/en-us.all.json",
		size: 1342,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1525534417, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFrontendLocaleEnusuntranslatedjson = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x05\x04\x00\x00\xff\xff\x43\xbf\xa6\xa3\x02\x00\x00\x00")

func bindataFrontendLocaleEnusuntranslatedjsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendLocaleEnusuntranslatedjson,
		"frontend/locale/en-us.untranslated.json",
	)
}



func bindataFrontendLocaleEnusuntranslatedjson() (*asset, error) {
	bytes, err := bindataFrontendLocaleEnusuntranslatedjsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/locale/en-us.untranslated.json",
		size: 2,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1525534417, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"frontend/application.coffee":             bindataFrontendApplicationcoffee,
	"frontend/application.js":                 bindataFrontendApplicationjs,
	"frontend/index.html":                     bindataFrontendIndexhtml,
	"frontend/locale/de-de.all.json":          bindataFrontendLocaleDedealljson,
	"frontend/locale/de-de.untranslated.json": bindataFrontendLocaleDedeuntranslatedjson,
	"frontend/locale/en-us.all.json":          bindataFrontendLocaleEnusalljson,
	"frontend/locale/en-us.untranslated.json": bindataFrontendLocaleEnusuntranslatedjson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"frontend": {Func: nil, Children: map[string]*bintree{
		"application.coffee": {Func: bindataFrontendApplicationcoffee, Children: map[string]*bintree{}},
		"application.js": {Func: bindataFrontendApplicationjs, Children: map[string]*bintree{}},
		"index.html": {Func: bindataFrontendIndexhtml, Children: map[string]*bintree{}},
		"locale": {Func: nil, Children: map[string]*bintree{
			"de-de.all.json": {Func: bindataFrontendLocaleDedealljson, Children: map[string]*bintree{}},
			"de-de.untranslated.json": {Func: bindataFrontendLocaleDedeuntranslatedjson, Children: map[string]*bintree{}},
			"en-us.all.json": {Func: bindataFrontendLocaleEnusalljson, Children: map[string]*bintree{}},
			"en-us.untranslated.json": {Func: bindataFrontendLocaleEnusuntranslatedjson, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
